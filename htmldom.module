<?php
// $Id$
/**
 * @file htmldom.module
 * HTML DOM Drupal elements and parser functions.
 */

/**
 * Implementation of hook_elements().
 *
 * These elements represent DOM nodes.
 */
function htmldom_elements() {
  $type['htmldom_xml_element'] = array(
    '#input' => FALSE,
    '#tag' => 'div',
    '#attributes' => array(),
    '#pre_render' => array('htmldom_xml_element_pre_render'),
  );
  return $type;
}

/**
 *
 */
function htmldom_xml_element_pre_render($element) {
  if (element_children($element)) {
    $element['#prefix'] = '<'. check_plain($element['#tag']) . drupal_attributes($element['#attributes']) .'>';
    $element['#suffix'] = '</'. check_plain($element['#tag']) .'>';
  }
  else {
    $element['#value'] = '<'. check_plain($element['#tag']) . drupal_attributes($element['#attributes']) .' />';
  }

  // The DOM elements should always reduce to markup elements.
  $element['#type'] = 'markup';
  return $element;
}

function htmldom_dom_to_array($domnode) {
  static $weight = 0;
  $element = array();
  switch ($domnode->nodeType) {
    case XML_ELEMENT_NODE:
      $element['#type'] = 'htmldom_xml_element';
      $element['#tag'] = $domnode->nodeName;
      $element['#attributes'] = array();
      foreach ($domnode->attributes as $attribute => $value) {
        $element['#attributes'][$attribute] = $value->value;
      }
      if ($domnode->hasChildNodes()) {
        foreach ($domnode->childNodes as $child) {
          $element[] = htmldom_dom_to_array($child);
        }
      }
      break;
    case XML_DOCUMENT_TYPE_NODE:
      // todo: handle all DOCTYPE variations.
      $element['#prefix'] = '<!DOCTYPE ';
      $element['#suffix'] = '>';
      $element['#value'] = $domnode->name .' PUBLIC "'. $domnode->publicId .'" "'. $domnode->systemId .'"';
      break;
    case XML_CDATA_SECTION_NODE:
      //$element['#prefix'] = '<![CDATA[//>';
      //$element['#suffix'] = '<!]]>';
      $element['#value'] = $domnode->data;
      break;
    case XML_COMMENT_NODE:
      $element['#prefix'] = '<!--';
      $element['#suffix'] = '-->';
    case XML_TEXT_NODE:
      $element['#value'] = $domnode->textContent;
      break;
    default:
      //dpm($domnode->nodeType);
      //dpm($domnode->name);
      break;
  }
  $element['#weight'] = $weight++;
  return $element;
}


/*
 * Test code:
$elements = array();
$elements[0] = array(
  '#type' => 'htmldom_xml_element',
  '#tag' => 'div',
  '#attributes' => array(
    'class' => 'hi',
  ),
);
$elements[0][0] = array(
   '#tag' => 'p',
   '#type' => 'htmldom_xml_element',
   '#value' => 'Hi',
);
$elements[0][0][0] = array(
  '#tag' => 'img',
  '#type' => 'htmldom_xml_element',
  '#attributes' => array(
    'src' => 'image.jpg',
  ),
);
dpm(drupal_render($elements));
 */

/*
$output = <<<EOT
EOT;
$document = new DOMDocument();
$document->loadHTML($output);
$xml = array();
$nodes = $document->getElementsByTagName('body')->item(0)->childNodes;
for ($i = 0; $i < $nodes->length; $i++) {
  $xml[] = htmldom_dom_to_array($nodes->item($i));
}
dpm($xml);
dpm(drupal_render($xml));
 */
